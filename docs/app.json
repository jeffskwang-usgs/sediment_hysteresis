[{"name": "app.py", "content": "from shiny import ui, render, App\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skewnorm\n\nimport matplotlib as mpl\nmpl.rcParams[\"font.family\"] = \"monospace\"\nmpl.rcParams.update({'font.size': 12})\n\nfontsize = 24\ncells = 250\nmax_x = 6\nprop = dict(arrowstyle=\"-|>,head_width=0.4,head_length=0.8\",shrinkA=0,shrinkB=0,color='k')\n\nq_color = (31./255., 119./255., 180./255., 50./255.)\nqs_color =(255./255., 127./255., 14./255., 50./255.)\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.h2(\"Stream Flow Parameters\", style=\"color:#1f77b4\"),\n            ui.input_slider(id=\"q_loc\", label=r\"\u03be, Location:\", min=-2., max=2., value=0.,ticks=True),\n            ui.input_slider(id=\"q_scale\", label=r\"\u03c9, Scale:\", min=0.25, max=4., value=1.,ticks=True),\n            ui.input_slider(id=\"q_shape\", label=r\"\u03b1, Shape:\", min=-8., max=8., value=0.8,ticks=True),\n            ui.hr(),\n            ui.h2(\"Turbidity Parameters\", style=\"color:#ff7f0e\"),\n            ui.input_slider(id=\"qs_loc\", label=r\"\u03be, Location:\", min=-2., max=2., value=-1.,ticks=True),\n            ui.input_slider(id=\"qs_scale\", label=r\"\u03c9, Scale:\", min=0.25, max=4., value=0.85,ticks=True),\n            ui.input_slider(id=\"qs_shape\", label=r\"\u03b1, Shape:\", min=-8., max=8., value=3.5,ticks=True)\n        ),\n        ui.panel_main(\n            ui.output_plot(id=\"histogram\")\n        )\n    )\n)\n\ndef server(input, output, session):\n    @output\n    @render.plot\n    def histogram():\n        fig, axs = plt.subplots(nrows=1,ncols=2)\n        x = np.linspace(-max_x,max_x,cells)\n        q = skewnorm.pdf(x,loc=input.q_loc(),scale=input.q_scale(),a=input.q_shape())\n        qs = skewnorm.pdf(x,loc=input.qs_loc(),scale=input.qs_scale(),a=input.qs_shape())\n        axs[0].fill_between(x, q, facecolor=q_color,edgecolor='tab:blue')\n        axs[0].fill_between(x, qs, facecolor=qs_color,edgecolor='tab:orange')\n        axs[0].set_xlim(-4,4)\n        axs[0].set_ylim(0,1.4)\n        axs[0].set_xlabel(\"Time\")\n        axs[0].set_xticks([])\n        axs[0].set_yticks([])\n\n        axs[0].text(-.001,0.5,\"Stream Flow     \", color = \"tab:blue\", rotation = \"vertical\",ha='right',va='top', transform=axs[0].transAxes)\n        axs[0].text(-.001,0.5,\"     Turbidity\", color = \"tab:orange\", rotation = \"vertical\",ha='right',va='bottom', transform=axs[0].transAxes)\n\n        axs[0].tick_params(direction=\"out\")\n        axs[0].spines[\"top\"].set_visible(False)\n        axs[0].spines[\"right\"].set_visible(False)\n\n        max_q = np.max(q)\n        max_qs = np.max(qs)\n        axs[1].plot(q/max_q,qs/max_qs,color='k', clip_on=False)\n        for i in range(0,cells-1,10):\n            if q[i+1]/max_q > 0.001 and qs[i+1]/max_qs > 0.001:\n                axs[1].annotate(\"\", xy=(q[i+1]/max_q,qs[i+1]/max_qs), xytext=(q[i]/max_q,qs[i]/max_qs), arrowprops=prop, clip_on=False)\n        axs[1].set_xlim(0,1.)\n        axs[1].set_ylim(0,1.)\n        axs[1].set_xlabel(\"Normalized Stream Flow [-]\",color=\"tab:blue\")\n        axs[1].set_ylabel(\"Normalized Turbidity [-]\",color=\"tab:orange\")\n\n        axs[1].tick_params(direction=\"out\")\n        axs[1].spines[\"top\"].set_visible(False)\n        axs[1].spines[\"right\"].set_visible(False)\napp = App(ui=app_ui, server=server) ", "type": "text"}]